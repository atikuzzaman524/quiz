<?php

/**
 * @file
 * Multiple choice question type for quiz module
 *
 * Allows the creation of multiple choice questions (ex: a, b, c, d or true/false)
 */

/**
 * Implementation of hook_perm().
 */
function multichoice_perm() {
  return array('create multichoice', 'edit own multichoice');
}

/**
 * Implementation of hook_access().
 */
function multichoice_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create multichoice');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own multichoice') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_node_info().
 */
function multichoice_node_info() {
  return array('multichoice' => array('name' => t('multichoice'), 'base' => 'multichoice'));
}

/**
 * Implementation of hook_menu().
 */
function multichoice_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/multichoice',
                     'title' => t('multichoice'),
                     'access' => user_access('create multichoice'));
  }
  return $items;
}

/**
 * Implementation of hook_form().
 */
function multichoice_form(&$node) {

  // Display multichoice form
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $node->title,
    '#required' => TRUE,
    '#description' => t('Add a title that will help distinguish this quesiton from other questions. This will not be seen during the quiz.'),
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Question'),
    '#default_value' => $node->body,
    '#required' => TRUE,
  );
  $form['body_filter']['format'] = filter_form($node->format);

  $form['multiple_answers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple answers'),
    '#default_value' => $node->multiple_answers,
  );

  // Determine number of answer rows to display
  if (!isset($node->rows)) {
     $node->rows = max(2, $node->answers ? count($node->answers) : 5);
  }
  if ($_POST['edit']['more']) {
    $node->rows += 5;
  }
  $answers = $node->answers;

  // Display answer rows
  $form['answers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choices'),
    '#tree' => TRUE,
    '#theme' => 'multichoice_form'
  );
  
  for ($i = 0; $i < $node->rows; $i++) {
    $form['answers'][$i]['correct'] = array(
      '#type' => 'checkbox',
      '#default_value' => $answers[$i]['points'],
    );
    $form['answers'][$i]['answer'] = array(
      '#type' => 'textarea',
      '#default_value' => $answers[$i]['answer'],
      '#cols' => 30, '#rows' => 2,
    );
    $form['answers'][$i]['feedback'] = array(
      '#type' => 'textarea',
      '#default_value' => $answers[$i]['feedback'],
      '#cols' => 30, '#rows' => 2,
    );
    if ($answers[$i]['aid']) {
      $form['answers'][$i]['delete'] = array(
        '#type' => 'checkbox',
        '#default_value' => 0,
      );

      $form['answers'][$i]['aid'] = array(
        '#type' => 'hidden',
        '#value' => $answers[$i]['aid'],
      );
    }
  }

  $form['more'] = array(
    '#type' => 'checkbox',
    '#title' => t('I need more answers'),
  );

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function multichoice_validate(&$node) {

  // Hard-code questions to have no teaser and to not be promoted to front page
  $node->teaser = 0;
  $node->promote = 0;

  if (!$node->nid && empty($_POST)) return;

  // Validate body
  if (!$node->body) {
    form_set_error('body', t('Question text is empty'));
  }

  // Validate answers
  $answers = array();
  $corrects = 0;

  while(list($key, $answer) = each($node->answers)) {

    if ($answer['correct']) {
      if ($corrects && !$node->multiple_answers) {
        form_set_error('multiple_answers', t('Single choice yet multiple correct answers are present'));
      }
      $corrects++;
    }
    if ($answer['answer']) {
      $answers[] = $answer['answer'];
    }
  }

  if (!$corrects) {
    form_set_error("answers][0]['correct'", t('No correct choice(s)'));
  }
  if (!count($answers)) {
    form_set_error("answers][0]['answer'", t('No answers.'));
  }
  if (count($answers) < 2) {
    form_set_error("answers][0]['answer'", t('Must have at least two answers'));
  }
}

/**
 * Implementation of hook_insert().
 */
function multichoice_insert(&$node) {
  db_query("INSERT INTO {quiz_question} (nid, properties) VALUES(%d, '%s')", $node->nid, serialize(array('multiple_answers' => $node->multiple_answers)));
  
  while(list($key, $value) = each($node->answers)) {
    if (trim($value['answer']) != "")
      db_query("INSERT INTO {quiz_question_answer} (aid, question_nid, answer, feedback, points) VALUES(%d, %d, '%s', '%s', %d)", 
        db_next_id('{quiz_question_answer}_aid'), $node->nid, $value['answer'], $value['feedback'], $value['correct']);
  }
}

/**
 * Implementation of hook_update().
 */
function multichoice_update($node) {
  db_query("UPDATE {quiz_question} SET properties = '%s' WHERE nid = %d", serialize(array('multiple_answers' => $node->multiple_answers)), $node->nid);
  
  while(list($key, $value) = each($node->answers)) {
    if ($value['aid']) {
      $value['answer'] = trim($value['answer']);
      if ($value['delete'] == 1 || empty($value['answer'])) {
        //Delete this entry
        db_query("DELETE FROM {quiz_question_answer} WHERE aid = %d", $value['aid']);
      } else {
        //Update this entry
        db_query("UPDATE {quiz_question_answer} SET answer = '%s', feedback = '%s', points = %s WHERE aid = %d", $value['answer'], $value['feedback'], $value['correct'], $value['aid']);
      }
    } else if (trim($value['answer']) != "") {
      //If there is an answer, insert a new row
      db_query("INSERT INTO {quiz_question_answer} (aid, question_nid, answer, feedback, points) VALUES(%d, %d, '%s', '%s', %d)", 
        db_next_id('{quiz_question_answer}_aid'), $node->nid, $value['answer'], $value['feedback'], $value['correct']);
    }
  }
}

/**
 * Implementation of hook_delete().
 */
function multichoice_delete(&$node) {
  db_query("DELETE FROM {quiz_question_answer} WHERE question_nid = %d", $node->nid);
  db_query("DELETE FROM {quiz_question} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function multichoice_load($node) {
  $additions = db_fetch_object(db_query("SELECT * FROM {quiz_question} WHERE nid = %d", $node->nid));
  
  $answers = array();
  $result = db_query("SELECT * FROM {quiz_question_answer} WHERE question_nid = %d", $node->nid);
  while($line = db_fetch_array($result)) {
    $answers[] = $line;
  }
  
  
  $additions->answers = $answers;
  
  $additions->properties = unserialize($additions->properties);
  $additions->multiple_answers = $additions->properties['multiple_answers'];
  
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function multichoice_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (user_access('create multichoice')) {
    if (!$teaser) {
      $node->body = multichoice_render_question($node);
    }
  }
  else if ($teaser) {
    $node->teaser = t('This is a quiz question, not to be viewed independently.');
    $node->body = $node->teaser; // we do not need Read more...
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implementation of hook_help().
 */
function multichoice_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Multiple choice question type for quiz module.');
    case 'node/add#multichoice':
      return t('A question type for the quiz module: allows you to create multiple choice questions (ex: A, B, C, D or true/false)');
  }
}

/**
 * Print question to screen
 *
 * @param $node
 *   Question node
 *
 * @return
 *   HTML output
 */
function multichoice_render_question($node) {
  // Radio buttons for single selection questions, checkboxes for multiselect
  if ($node->multiple_answers == 0) {
    $type = 'radios';
  }
  else {
    $type = 'checkboxes';
  }

  // Get options
  $options = array();

  while(list($key, $answer) = each($node->answers)) {
    if (empty($answer['correct']) && empty($answer['answer']) && empty($answer['feedback'])) {
      unset($node->answers[$key]);
    }
    else {
      $options[$key] = '<div class="multichoice_answer_text">'. check_markup($answer['answer'], $node->filter, FALSE) .'</div>';
    }
  }
  
  $form['start'] = array('#type' => 'markup', '#value' => '<div class="multichoice_form">');
  $form['question'] = array('#type' => 'markup', '#value' => check_markup($node->body, $node->format, FALSE));
  
  // Create form
  $form['tries'] = array(
    '#type' => $type,
    '#options' => $options,
    '#default_value' => -1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return drupal_get_form('multichoice_render_question', $form);
}

/**
 * Evaluate whether question is correct
 *
 * @param $nid
 *   Question Node ID
 *
 * @return
 *   Array of results, in the form of:
 *   array(
 *     'answers' => array of correct answer(s)
 *     'tried' => array of selected answer(s)
 *   );
 */
function multichoice_evaluate_question($nid) {
  $question = node_load($nid);
  $results = array();

  if (isset($_POST['edit']['tries'])) {
    if (is_array($_POST['edit']['tries'])) {

      // Multi-answer question
      while(list($key, $try) = each($_POST['edit']['tries'])) {
        $results['answers'] = $question->answers;
        $results['tried'][] = $question->answers[$try]['aid'];
      }
    }
    else {

      // Single-answer question
      $results['answers'] = $question->answers;
      $results['tried'][] = $question->answers[$_POST['edit']['tries']]['aid'];
    }
  }
  //Unset $_POST, otherwise it tries to use the previous answers on the next page...
  unset($_POST['edit']['tries']);
  
  //Return the result
  return $results;
}

//Old claculate result function
function multichoice_calculate_result($answers, $tried) {
  while(list($key, $answer) = each($answers)) {
    if ($answer['points'] == 1) {
      if (($key = array_search($answer['aid'], $tried)) !== FALSE) {
        //Correct answer was selected, so lets take that out the tried list
        unset($tried[$key]);
      }
      else {
        //Correct answer was not in the "tried" list, so score 0
        return 0;
      }
    }
  }
  //Finally - have we got any answers left?
  //If so - they weren't knocked out as one of the correct ones so logically they must be incorrect!
  if (count($tried) > 0) return 0;

  
  //Finally, we can consider this correct if its passed the above tests!
  return 1;
}

//New singing and dancing one
function multichoice_calculate_results($answers, $tried, $showPoints = FALSE, $showFeedback = FALSE) {
  //Create results table
  $rows = array();
  $correctAnswers = array();
  
  while(list($key, $answer) = each($answers)) {
    $cols = array();
    
    $cols[] = $answer['answer'];
    if($showPoints) $cols[] = (($answer['points'] == 0) ? theme_multichoice_unselected() : theme_multichoice_selected());
    $isSelected = (array_search($answer['aid'], $tried) !== FALSE);
    $cols[] = ($isSelected ? theme_multichoice_selected() : theme_multichoice_unselected());
    if($showFeedback) $cols[] = ($isSelected ? '<div class="quiz_answer_feedback">'. $answer['feedback'] .'</div>' : '');
  
    $rows[] = $cols;
  
  	
  	if($answer['points'] > 0) {
  	  $correctAnswers[] = $answer['aid'];
  	}
  }

  
  if($correctAnswers === $tried) { $score = 1; } else { $score = 0; }
  
  return array('score' => $score, 'resultstable' => $rows);
}

/**
 * List all multiple choice questions
 *
 * @return
 *   Array of questions
 */
function multichoice_list_questions() {
  $result = db_query("SELECT nid, body, format FROM {node} WHERE type= '%s'", 'multichoice');
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $questions[] = $question;
  }
  return $questions;
}

/////////////////////////////////////////////////
/// Theme functions
/////////////////////////////////////////////////

/**
 * Theme function for multichoice form
 *
 * Lays out answer field elements into a table
 *
 * @return string
 *   HTML output
 */
function theme_multichoice_form($form) {

  // Format table header
  $header = array(
    array('data' => t('Correct')),
    array('data' => t('Answer'), 'style' => 'width:250px;'),
    array('data' => t('Feedback'), 'style' => 'width:250px;'),
    array('data' => t('Delete')),
  );

  // Format table rows
  $rows = array();
  foreach (element_children($form) as $key) {
    $rows[] = array(
      form_render($form[$key]['correct']),
      form_render($form[$key]['answer']),
      form_render($form[$key]['feedback']),
      form_render($form[$key]['delete']),
    );
  }

  // Theme output and display to screen
  $output = theme('table', $header, $rows);

  return $output;
}


/**
 * Theme a selection indicator for an answer
 * TODO: Default images would be nice
 */
function theme_multichoice_selected(){
  return theme_image(drupal_get_path('module', 'quiz').'/images/selected.gif', t('selected'));
}


/**
 * Theme an indicator that an answer is not selected / correct
 * TODO: Default images would be nice
 */
function theme_multichoice_unselected(){
  return theme_image(drupal_get_path('module', 'quiz').'/images/unselected.gif', t('unselected'));
}


/**
 * Theme function for the multichoice form
 */
function theme_multichoice_render_question($form){
  $output = '';
  $output .= form_render($form);
  return $output;
}
